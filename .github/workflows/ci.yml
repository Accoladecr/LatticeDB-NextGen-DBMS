name: CI/CD Pipeline for LatticeDB DBMS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

concurrency:
  group: latticedb-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CMAKE_BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    name: "🔧 Build (Devcontainer)"
    runs-on: ubuntu-latest
    env:
      CCACHE_DIR: ${{ runner.temp }}/.ccache   # runner context allowed at job/step scope
      CCACHE_MAXSIZE: 1G

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Setup & Build (streamed)
        id: build_and_log
        shell: bash
        timeout-minutes: 30
        run: |
          set +e
          set -o pipefail

          SUMMARY_FILE="$RUNNER_TEMP/summary-build.env"
          LOG_DIR="$RUNNER_TEMP/logs/build"
          ARTIFACT_DIR="$RUNNER_TEMP/artifacts"
          mkdir -p "$LOG_DIR" "$ARTIFACT_DIR"
          : > "$SUMMARY_FILE"

          run_cmd() {
            local label="$1"; shift
            local logfile="$LOG_DIR/${label}.log"

            echo "::group::${label}"
            echo "[$(date -u +%T)] START ${label}"
            { stdbuf -oL -eL "$@" |& tee "$logfile"; } ; status=${PIPESTATUS[0]}
            echo "${label}_status=${status}" >> "$SUMMARY_FILE"
            echo "[$(date -u +%T)] END ${label} (exit ${status})"
            echo "::endgroup::"
          }

          export DEBIAN_FRONTEND=noninteractive

          run_cmd dependencies sudo apt-get update -o Acquire::Retries=3
          run_cmd packages sudo apt-get install -yq cmake g++ ninja-build ccache clang-format zip coreutils

          run_cmd configure cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

          run_cmd build cmake --build build -j

          run_cmd format cmake --build build --target format

          run_cmd rebuild cmake --build build -j

          # Quick packaging of the build dir
          run_cmd package tar -czf "$ARTIFACT_DIR/latticedb-build.tar.gz" -C build .

          # Expose paths to later steps
          echo "summary_file=$SUMMARY_FILE" >> "$GITHUB_OUTPUT"
          echo "artifact_path=$ARTIFACT_DIR/latticedb-build.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload Build Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latticedb-build
          path: ${{ steps.build_and_log.outputs.artifact_path }}
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-build
          path: ${{ runner.temp }}/logs/build
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Build Summary Data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary-build
          path: ${{ steps.build_and_log.outputs.summary_file }}

      - name: Fail Build if any sub-step failed
        shell: bash
        run: |
          SUMMARY_FILE="${{ steps.build_and_log.outputs.summary_file }}"
          status=0
          if [[ -f "$SUMMARY_FILE" ]]; then
            while IFS='=' read -r k v; do
              [[ "$k" ]] || continue
              [[ "$v" == "0" ]] || status=1
            done < "$SUMMARY_FILE"
          else
            echo "Summary missing"
            status=1
          fi
          exit $status

  test:
    name: "🧪 Tests"
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: latticedb-build
          path: ${{ runner.temp }}/dl

      - name: Extract Build
        shell: bash
        run: |
          mkdir -p build
          tar -xzf "${RUNNER_TEMP}/dl/latticedb-build.tar.gz" -C build

      - name: Install Test Dependencies
        shell: bash
        run: |
          sudo apt-get update -o Acquire::Retries=3
          sudo apt-get install -yq cmake ninja-build ccache zip coreutils

      - name: Run Tests (streamed)
        id: run_tests
        shell: bash
        timeout-minutes: 25
        run: |
          set +e
          set -o pipefail

          SUMMARY_FILE="$RUNNER_TEMP/summary-test.env"
          LOG_DIR="$RUNNER_TEMP/logs/test"
          mkdir -p "$LOG_DIR"
          : > "$SUMMARY_FILE"

          run_cmd() {
            local label="$1"; shift
            local logfile="$LOG_DIR/${label}.log"
            echo "::group::${label}"
            echo "[$(date -u +%T)] START ${label}"
            { stdbuf -oL -eL "$@" |& tee "$logfile"; } ; status=${PIPESTATUS[0]}
            echo "${label}_status=${status}" >> "$SUMMARY_FILE"
            echo "[$(date -u +%T)] END ${label} (exit ${status})"
            echo "::endgroup::"
          }

          run_cmd ctest ctest --test-dir build -j 4 --output-on-failure

          if [[ -x tests/run_all.sh ]]; then
            run_cmd shell_harness bash tests/run_all.sh
          else
            echo "shell_harness_status=0" >> "$SUMMARY_FILE"
            echo "tests/run_all.sh not present; skipping."
          fi

          # Smoke SQL
          cat > "$RUNNER_TEMP/smoke.sql" <<'SQL'
          CREATE TABLE t (id TEXT PRIMARY KEY, v INT);
          INSERT INTO t (id, v) VALUES ('a', 1);
          SELECT id, v FROM t;
          EXIT;
          SQL
          run_cmd smoke bash -lc "build/latticedb < \"$RUNNER_TEMP/smoke.sql\""

          echo "summary_file=$SUMMARY_FILE" >> "$GITHUB_OUTPUT"

      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-test
          path: ${{ runner.temp }}/logs/test
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Test Summary Data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary-test
          path: ${{ steps.run_tests.outputs.summary_file }}

      - name: Fail Tests if any sub-step failed
        shell: bash
        run: |
          SUMMARY_FILE="${{ steps.run_tests.outputs.summary_file }}"
          status=0
          if [[ -f "$SUMMARY_FILE" ]]; then
            while IFS='=' read -r k v; do
              [[ "$k" ]] || continue
              [[ "$v" == "0" ]] || status=1
            done < "$SUMMARY_FILE"
          else
            echo "Summary missing"
            status=1
          fi
          exit $status

  package:
    name: "📦 Package"
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: latticedb-build
          path: ${{ runner.temp }}/dl

      - name: Repackage & Checksum
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          SUMMARY_FILE="$RUNNER_TEMP/summary-package.env"
          LOG_DIR="$RUNNER_TEMP/logs/package"
          OUT_DIR="$RUNNER_TEMP/release"
          mkdir -p "$LOG_DIR" "$OUT_DIR"
          : > "$SUMMARY_FILE"

          cp "$RUNNER_TEMP/dl/latticedb-build.tar.gz" "$OUT_DIR/"
          pushd "$OUT_DIR" >/dev/null
          sha256sum latticedb-build.tar.gz | tee latticedb-build.tar.gz.sha256 >"$LOG_DIR/checksum.log"
          popd >/dev/null

          echo "checksum_status=$?" >> "$SUMMARY_FILE"
          echo "release_dir=$OUT_DIR" >> "$GITHUB_OUTPUT"
          echo "summary_file=$SUMMARY_FILE" >> "$GITHUB_OUTPUT"

      - name: Upload Release Bundle
        uses: actions/upload-artifact@v4
        with:
          name: latticedb-release
          path: |
            ${{ steps.pkg.outputs.release_dir }}/latticedb-build.tar.gz
            ${{ steps.pkg.outputs.release_dir }}/latticedb-build.tar.gz.sha256
          retention-days: 14

      - name: Upload Package Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-package
          path: ${{ runner.temp }}/logs/package
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Package Summary Data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary-package
          path: ${{ steps.pkg.outputs.summary_file }}

  summary:
    name: "📝 Summary"
    runs-on: ubuntu-latest
    needs: [build, test, package]
    if: always()

    steps:
      - name: Download All Summaries
        uses: actions/download-artifact@v4
        with:
          pattern: summary-*
          merge-multiple: true
          path: ${{ runner.temp }}/summaries

      - name: Publish Job Summary
        shell: bash
        run: |
          echo "## CI/CD Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          report_file() {
            local title="$1"; local file="$2"
            echo "### ${title}" >> "$GITHUB_STEP_SUMMARY"
            if [[ -f "$file" ]]; then
              while IFS='=' read -r key value; do
                [[ "$key" ]] || continue
                local label="${key%_status}"
                if [[ "$value" == "0" ]]; then
                  echo "- [x] ${label}" >> "$GITHUB_STEP_SUMMARY"
                else
                  echo "- [ ] ${label} (exit ${value})" >> "$GITHUB_STEP_SUMMARY"
                fi
              done < "$file"
            else
              echo "- [ ] summary_data_missing" >> "$GITHUB_STEP_SUMMARY"
            fi
            echo "" >> "$GITHUB_STEP_SUMMARY"
          }

          report_file "🔧 Build"   "${RUNNER_TEMP}/summaries/summary-build.env"
          report_file "🧪 Tests"   "${RUNNER_TEMP}/summaries/summary-test.env"
          report_file "📦 Package" "${RUNNER_TEMP}/summaries/summary-package.env"

          echo "### 📎 Artifacts & Logs" >> "$GITHUB_STEP_SUMMARY"
          echo "- Build: \`latticedb-build\`, logs in \`logs-build\`"  >> "$GITHUB_STEP_SUMMARY"
          echo "- Tests: logs in \`logs-test\`"                      >> "$GITHUB_STEP_SUMMARY"
          echo "- Package: \`latticedb-release\`, logs in \`logs-package\`" >> "$GITHUB_STEP_SUMMARY"
